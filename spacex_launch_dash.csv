import dash
from dash import dcc, html, Input, Output
import plotly.express as px
import pandas as pd

# Load the dataset
URL = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/spacex_launch_geo.csv'
spacex_df = pd.read_csv(URL)

min_payload = spacex_df['Payload Mass (kg)'].min()
max_payload = spacex_df['Payload Mass (kg)'].max()

def categorize_booster_version(booster_version):
    if 'v1.0' in booster_version:
        return 'v1.0'
    elif 'v1.1' in booster_version:
        return 'v1.1'
    elif 'FT' in booster_version:
        return 'FT'
    elif 'B4' in booster_version:
        return 'B4'
    elif 'B5' in booster_version:
        return 'B5'
    else:
        return 'Other'

# 3. Apply the function to the 'Booster Version' column to create a new category column
spacex_df['Booster Version Category'] = spacex_df['Booster Version'].apply(categorize_booster_version)


# Initialize the Dash app
app = dash.Dash(__name__)

# Get unique launch sites
unique_sites = ['ALL'] + list(spacex_df['Launch Site'].unique())

# Layout of the app
app.layout = html.Div([
    # Title
    html.H1("SpaceX Launch Records Dashboard", style={'textAlign': 'center'}),
    
    # Dropdown menu for selecting the launch site
    dcc.Dropdown(
        id='site-dropdown',
        options=[{'label': site, 'value': site} for site in unique_sites],
        value='ALL',
        placeholder="Select a Launch Site here",
        searchable=True
    ),

    # Pie chart placeholder
    dcc.Graph(id='success-pie-chart'),

    # RangeSlider for payload
    html.Div([
    html.Label('Payload Mass (KG)', style={'font-weight': 'bold', 'margin-top': '20px'}),
    dcc.RangeSlider(
        id='payload-slider',
        min=0,
        max=10000,
        step=1000,
        marks={0: '0', 2500: '2500', 5000: '5000', 7500: '7500', 10000: '10000'},
        value=[min_payload, max_payload]
    )
]), dcc.Graph(id='success-payload-scatter-chart'),
])

# Callback to update the pie chart based on site selection
@app.callback(
    Output(component_id='success-pie-chart', component_property='figure'),
    Input(component_id='site-dropdown', component_property='value')
)
def get_pie_chart(entered_site):
    if entered_site == 'ALL':
        # If ALL sites are selected, calculate success by site
        success_by_site = spacex_df[spacex_df['class'] == 1].groupby('Launch Site').size()
        failed_by_site = spacex_df[spacex_df['class'] == 0].groupby('Launch Site').size()
        
        # Merge success and failed counts into one dataframe
        launch_counts = pd.DataFrame({
            'Success': success_by_site,
            'Failed': failed_by_site
        }).fillna(0)
        
        # Create a pie chart showing success launches by site
        fig = px.pie(launch_counts, names=launch_counts.index, values='Success',
                     title='Total Success Launches by Site')
        return fig
    else:
        # If a specific site is selected, filter data and show success/failure count
        site_data = spacex_df[spacex_df['Launch Site'] == entered_site]
        success_count = site_data[site_data['class'] == 1].shape[0]
        failure_count = site_data[site_data['class'] == 0].shape[0]
        
        # Create a pie chart showing success vs failure for the selected site
        fig = px.pie(values=[success_count, failure_count], names=['Success', 'Failure'],
                     title=f"Success vs Failure for {entered_site}")
        return fig

# Callback to render the scatter plot for success vs payload
@app.callback(
    Output(component_id='success-payload-scatter-chart', component_property='figure'),
    [
        Input(component_id='site-dropdown', component_property='value'),
        Input(component_id="payload-slider", component_property="value")
    ]
)
def get_scatter_plot(entered_site, payload_range):
    # Filter data based on payload range
    filtered_df = spacex_df[(spacex_df['Payload Mass (kg)'] >= payload_range[0]) &
                            (spacex_df['Payload Mass (kg)'] <= payload_range[1])]
    
    if entered_site == 'ALL':
        # If ALL sites are selected, show all data
        fig = px.scatter(
            filtered_df, 
            x='Payload Mass (kg)', 
            y='class', 
            color='Booster Version Category',
            title='Success vs Payload Mass (All Sites)'
        )
    else:
        # If a specific site is selected, filter data for that site
        site_data = filtered_df[filtered_df['Launch Site'] == entered_site]
        fig = px.scatter(
            site_data, 
            x='Payload Mass (kg)', 
            y='class', 
            color='Booster Version Category',
            title=f'Success vs Payload Mass for {entered_site}'
        )
    
    return fig

# Set the suppress_callback_exceptions configuration
app.config.suppress_callback_exceptions = True

# Run the server
if __name__ == "__main__":
    app.run_server(debug=True, host='0.0.0.0', port=8051)

